#!/bin/sh -e
#
# https://rgz.ee/bin/ssg5
# Copyright 2018-2019 Roman Zolotarev <hi@romanzolotarev.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

main() {
	test -n "$1" || usage
	test -n "$2" || usage
	test -n "$3" || usage
	test -n "$4" || usage
	test -d "$1" || no_dir "$1"
	test -d "$2" || no_dir "$2"

	src=$(readlink_f "$1")
	dst=$(readlink_f "$2")

	IGNORE=$(
		if ! test -f "$src/.ssgignore"; then
			printf ' ! -path "*/.*"'
			return
		fi
		while read -r x; do
			test -n "$x" || continue
			printf ' ! -path "*/%s*"' "$x"
		done <"$src/.ssgignore"
	)

	# files

	title="$3"

	h_file="$src/_header.html"
	f_file="$src/_footer.html"
	s_file="$src/_style.css"
	test -f "$f_file" && FOOTER=$(cat "$f_file") && export FOOTER
	test -f "$h_file" && HEADER=$(cat "$h_file") && export HEADER
	test -f "$s_file" && STYLES=$(cat "$s_file") && export STYLES

	fs=$(list_files "$1")

	if test -n "$fs"; then

		if echo "$fs" | grep -q '\.md$'; then
			if test -x "$(which lowdown 2>/dev/null)"; then
				echo "$fs" | grep '\.md$' |
					render_md_files_lowdown "$src" "$dst" "$title"
			else
				echo "couldn't find lowdown!"
				exit 3
			fi
		fi

		echo "$fs" | grep '\.html$' |
			render_html_files "$src" "$dst" "$title"

		echo "$fs" | grep -Ev '\.md$|\.html$' |
			(cd "$src" && cpio -pu "$dst")
	fi

	render_articles "$src/articles" "$2/index.html"

	printf '[fleap-ssg] ' >&2
	print_status 'file, ' 'files, ' "$fs" >&2

	print_status 'url' 'urls' "$urls" >&2
	echo >&2
}

readlink_f() {
	file="$1"
	cd "$(dirname "$file")"
	file=$(basename "$file")
	while test -L "$file"; do
		file=$(readlink "$file")
		cd "$(dirname "$file")"
		file=$(basename "$file")
	done
	dir=$(pwd -P)
	echo "$dir/$file"
}

print_status() {
	test -z "$3" && printf 'no %s' "$2" && return

	echo "$3" | awk -v singular="$1" -v plural="$2" '
	END {
		if (NR==1) printf NR " " singular
		if (NR>1) printf NR " " plural
	}'
}

usage() {
	echo "usage: ${0##*/} src dst title base_url" >&2
	exit 1
}

no_dir() {
	echo "${0##*/}: $1: No such directory" >&2
	exit 2
}

list_files() {
	cd "$1" && eval "find . -type f ! -name '.' ! -path '*/_*' $IGNORE"
}

list_dependant_files() {
	e="\\( -name '*.html' -o -name '*.md' -o -name '*.css' -o -name '*.js' \\)"
	cd "$1" && eval "find . -type f ! -name '.' ! -path '*/_*' $IGNORE $e"
}

list_newer_files() {
	cd "$1" && eval "find . -type f ! -name '.' $IGNORE -newer $2"
}

has_partials() {
	grep -qE '^./_.*\.html$|^./_.*\.js$|^./_.*\.css$'
}

list_affected_files() {
	fs=$(list_newer_files "$1" "$2")

	if echo "$fs" | has_partials; then
		list_dependant_files "$1"
	else
		echo "$fs"
	fi
}

render_html_files() {
	while read -r f; do
		render_html_file "$3" <"$1/$f" >"$2/$f"
	done
}

render_md_files_lowdown() {
	while read -r f; do
		outfile=$(echo $f | rev | awk -v FS='/' '{print $1}' | rev)
		lowdown <"$1/$f" |
			render_html_file "$3" \
				>"$2/${outfile%\.md}.html"
	done
}

render_md_files_Markdown_pl() {
	while read -r f; do
		Markdown.pl <"$1/$f" |
			render_html_file "$3" \
				>"$2/${f%\.md}.html"
	done
}

render_html_file() {
	# h/t Devin Teske
	awk -v title="$1" '
	{ body = body "\n" $0 }
	END {
		body = substr(body, 2)
		if (body ~ /<[Hh][Tt][Mm][Ll]/) {
			print body
			exit
		}
		if (match(body, /<[[:space:]]*[Hh]1(>|[[:space:]][^>]*>)/)) {
			t = substr(body, RSTART + RLENGTH)
			sub("<[[:space:]]*/[[:space:]]*[Hh]1.*", "", t)
			gsub(/^[[:space:]]*|[[:space:]]$/, "", t)
			if (t) title = t " &mdash; " title
		}
		n = split(ENVIRON["HEADER"], header, /\n/)
		for (i = 1; i <= n; i++) {
			if (match(tolower(header[i]), "<title></title>")) {
				head = substr(header[i], 1, RSTART - 1)
				tail = substr(header[i], RSTART + RLENGTH)
				print head "<title>" title "</title>" tail
			} else print header[i]
		}
		print "\n<style>\n" ENVIRON["STYLES"] "\n</style>\n"
		print body
		print ENVIRON["FOOTER"]
	}'
}

render_articles() {
	articlesFiles=$(list_files $1)
	articlesHtml="<ul id=\"articles\">"

	for article in $articlesFiles; do
		art_date=$(head -n 3 "$1/$article" | tail -n 1)  # Read article date from line 3
		articles="$(echo "$articles\n$art_date:$article" | sort -r)"
	done

	for article in $articles; do
		article=$(echo $article | cut -d: -f 2- | cut -c 3-)
		art_title=$(head -n 1 "$1/$article" | cut -c 3-) # Read article title from line 1
		art_date=$(head -n 3 "$1/$article" | tail -n 1)  # Read article date from line 3
		art_url=$(echo "${article%\.md}.html" | cut -c 1-)
		html="<li><a href=\"$art_url\">$art_title</a> <span>$art_date</span></li>"
		articlesHtml="$articlesHtml$html"
	done

	articlesHtml="$articlesHtml</ul>"

	content=$(sed -e "s|</articles>|$articlesHtml</articles>|g" "$2")

	echo "$content" > $2

	articleCount=$(echo $articlesFiles | wc -w)
	echo "[fleap-ssg] rendered $articleCount articles on $2!"
}

list_pages() {
	e="\\( -name '*.html' -o -name '*.md' \\)"
	cd "$1" && eval "find . -type f ! -path '*/.*' ! -path '*/_*' $IGNORE $e" |
	sed 's#^./##;s#.md$#.html#;s#/index.html$#/#'
}

main "$@"
